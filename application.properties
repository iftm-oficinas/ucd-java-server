# ===============================
# = SPRING BOOT
# ===============================

# Use application.properties

# Change the HTTP port
# server.port = 8080
# server.port = 8090

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection
# spring.datasource.platform=h2
# spring.datasource.platform=mysql
# spring.datasource.platform=postgreesql

# Connection url for the database
# spring.datasource.url=jdbc:h2:mem:testdb;Mode=Oracle
# spring.datasource.url = jdbc:postgresql://localhost:5432/database
# spring.datasource.url = jdbc:mysql://localhost:3306/database

# Username and password
# spring.datasource.username = sa
# spring.datasource.password = 

# Initialize a database using Hibernate
# spring.datasource.initialize = false
# spring.datasource.schema = classpath:/database/schema.sql
# spring.datasource.data = classpath:/database/data.sql

# Keep the connection alive if idle for a long time (needed in production)
# spring.datasource.testWhileIdle = true
# spring.datasource.validationQuery = SELECT 1
# spring.datasource.continue-on-error = true

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is stripped before adding them to the entity manager).

# Show or not log for each sql query
# spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database schema will be automatically updated accordingly to java entities found in the project.
# spring.jpa.hibernate.ddl-auto = none

# Naming strategy
# spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
